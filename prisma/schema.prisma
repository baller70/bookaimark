// datasource and generator
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -------------------
// Base Models
// -------------------
model User {
  id        String      @id @default(uuid())
  email     String      @unique
  // ... other user fields ...

  favorites        Favorite[]
  playlists        Playlist[]
  searchQueries    SearchQuery[]
  analytics        AnalyticsSnapshot[]
  timeCapsules     TimeCapsule[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id   String @id @default(uuid())
  name String @unique

  favorites FavoriteTag[]
}

// -------------------
// Favorites
// -------------------
model Favorite {
  id          String       @id @default(uuid())
  userId      String
  url         String
  title       String?
  description String?
  category    String?
  createdAt   DateTime     @default(now())

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags        FavoriteTag[]

  @@index([userId])
  @@unique([userId, url])
}

model FavoriteTag {
  favoriteId String
  tagId      String

  favorite   Favorite @relation(fields: [favoriteId], references: [id], onDelete: Cascade)
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([favoriteId, tagId])
  @@index([tagId])
}

// -------------------
// Playlist
// -------------------
model Playlist {
  id          String         @id @default(uuid())
  userId      String
  name        String
  description String?
  createdAt   DateTime       @default(now())

  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  items       PlaylistItem[]

  @@index([userId])
}

model PlaylistItem {
  id          String   @id @default(uuid())
  playlistId  String
  order       Int
  url         String
  title       String?
  description String?
  duration    Int?     // seconds
  metadata    Json?

  playlist    Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)

  @@index([playlistId])
  @@unique([playlistId, order])
}

// -------------------
// Search
// -------------------
model SearchQuery {
  id         String   @id @default(uuid())
  userId     String
  query      String
  result     Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// -------------------
// Analytics
// -------------------
model AnalyticsSnapshot {
  id        String      @id @default(uuid())
  userId    String
  metric    MetricName
  value     Float
  capturedAt DateTime   @default(now())

  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@unique([userId, metric, capturedAt])
}

enum MetricName {
  TOTAL_BOOKMARKS
  FAVORITES_COUNT
  PLAYLIST_PLAYS
  SEARCH_COUNT
  // add more metrics as needed
}

// -------------------
// Time Capsule
// -------------------
model TimeCapsule {
  id         String   @id @default(uuid())
  userId     String
  snapshot   Json
  createdAt  DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}