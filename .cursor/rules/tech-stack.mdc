---
description: BookAIMark tech stack, dependency versions, and best practices guide
globs: **/*
alwaysApply: true
---

# BookAIMark Tech Stack & Dependencies

This rule documents the complete technology stack, dependency versions, and best practices for the BookAIMark project.

## 🏗️ **Project Architecture**

### **Monorepo Structure**
- **Package Manager:** `pnpm@8.15.0` (workspace-based monorepo)
- **Workspace Configuration:** `pnpm-workspace.yaml`
- **Node Version:** `>=18.0.0`

```yaml
# pnpm-workspace.yaml
packages:
  - "apps/*"      # Main applications
  - "packages/*"  # Shared packages
  - "features/*"  # Feature modules
```

## 🚀 **Core Framework & Runtime**

### **Next.js 15.2** - Full-Stack React Framework
- **Version:** `15.2` (Latest stable - February 2025)
- **Router:** App Router (modern approach)
- **Features Used:**
  - Server Components
  - API Routes
  - Image Optimization
  - Internationalization (12 locales)
  - Server Actions
  - Streaming metadata
  - Redesigned error UI
  - React View Transitions (experimental)
  - Node.js Middleware (experimental)

**Best Practices:**
- ✅ Using App Router for modern React patterns
- ✅ Server Components for performance
- ✅ Image optimization with WebP/AVIF formats
- ✅ Streaming metadata for better performance
- ✅ Enhanced error reporting and debugging
- ⚠️ Turbopack stable but persistent caching still experimental

### **React 19** - UI Library
- **Version:** `19.0.0` (Stable - December 2024)
- **Features Used:**
  - Actions and Server Actions
  - New hooks: useActionState, useOptimistic, useFormStatus
  - use() API for promises and context
  - Ref as prop (no more forwardRef)
  - Concurrent Features
  - Suspense improvements
  - Document metadata support
  - Custom Elements support

**Best Practices:**
- ✅ Using React 19 Actions for form handling
- ✅ Server Actions for client-server communication
- ✅ useOptimistic for optimistic updates
- ✅ Native document metadata management
- ✅ Ref cleanup functions for better memory management
- ⚠️ Upgrade from React 18.3 first for smoother transition

### **TypeScript 5.5+** - Type Safety
- **Version:** `5.5.2` (Latest stable)
- **Configuration:** Strict mode enabled
- **Features Used:**
  - Strict type checking
  - Path mapping
  - Incremental compilation
  - React 19 type improvements
  - Better useReducer typings

**Best Practices:**
- ✅ Strict mode enabled for better type safety
- ✅ Path mapping for clean imports
- ✅ Incremental compilation for faster builds
- ✅ Use React 19 codemods for type migrations
- ✅ useRef now requires an argument for better type safety

## 🎨 **UI & Styling Stack**

### **Tailwind CSS 3.4.0** - Utility-First CSS
- **Version:** `3.4.0` (Latest)
- **Plugins:** `tailwindcss-animate`
- **Features Used:**
  - Dark mode support
  - Custom animations
  - Responsive design
  - CSS Variables integration

**Best Practices:**
- ✅ Using CSS variables for theming
- ✅ Custom animations for enhanced UX
- ✅ Responsive-first design approach

### **Radix UI** - Headless Component Library
- **Version Range:** `1.0.x - 2.0.x` (Latest stable)
- **Components Used:**
  - Accordion, Alert Dialog, Avatar
  - Checkbox, Dialog, Dropdown Menu
  - Label, Popover, Select, Switch
  - Tabs, Toast, Tooltip

**Best Practices:**
- ✅ Using headless components for accessibility
- ✅ Consistent component API patterns
- ✅ Full keyboard navigation support

### **Lucide React 0.294.0** - Icon Library
- **Version:** `0.294.0` (Latest)
- **Features:** Tree-shakeable, consistent design

**Best Practices:**
- ✅ Tree-shakeable imports
- ✅ Consistent icon sizing
- ✅ Semantic icon usage

## 🔧 **Development Tools**

### **Animation & Interactions**
- **Framer Motion:** `12.23.3` (Latest)
- **Class Variance Authority:** `0.7.0` (Component variants)
- **Tailwind Merge:** `2.1.0` (Class merging)

### **Form Handling**
- **React Hook Form:** `7.60.0` (Latest)
- **Zod:** `3.22.4` (Schema validation)

### **Drag & Drop**
- **DND Kit:** `6.1.0` (Core), `8.0.0` (Sortable)

## 🗄️ **Backend & Database**

### **Supabase** - Backend as a Service
- **Client:** `@supabase/supabase-js@2.47.2`
- **Auth Helpers:** `@supabase/auth-helpers-nextjs@0.10.0`
- **Features Used:**
  - Authentication
  - Real-time subscriptions
  - File storage
  - Edge functions

**Best Practices:**
- ✅ Using auth helpers for Next.js integration
- ✅ Row Level Security (RLS) for data protection
- ⚠️ Consider upgrading to latest Supabase client

### **Prisma** - Database ORM
- **Database:** PostgreSQL
- **Schema:** Comprehensive marketplace model
- **Features Used:**
  - Type-safe database queries
  - Migrations
  - Schema introspection

**Best Practices:**
- ✅ Using UUID primary keys
- ✅ Proper indexing strategy
- ✅ Cascade delete relationships

## 🤖 **AI & External Services**

### **OpenAI 4.76.1** - AI Integration
- **Version:** `4.76.1` (Latest)
- **Features Used:**
  - Chat completions
  - Function calling
  - Embeddings

### **Stripe** - Payment Processing
- **Server:** `stripe@18.3.0`
- **Client:** `@stripe/stripe-js@7.4.0`
- **Features Used:**
  - Payment intents
  - Subscriptions
  - Webhooks

### **Resend 4.6.0** - Email Service
- **Version:** `4.6.0` (Latest)
- **Features Used:**
  - Transactional emails
  - React email templates

## 📊 **Monitoring & Analytics**

### **Sentry 9.33.0** - Error Tracking
- **Version:** `9.33.0` (Latest)
- **Features Used:**
  - Error monitoring
  - Performance tracking
  - Source maps

**Best Practices:**
- ✅ Automatic error capture
- ✅ Performance monitoring
- ✅ User feedback integration

## 🔧 **Build & Development**

### **Development Tools**
- **Concurrently:** `8.2.2` (Parallel scripts)
- **Autoprefixer:** `10.4.16` (CSS prefixing)
- **PostCSS:** `4.0.0` (CSS processing)

### **Performance Optimization**
- **Node Options:** `--max-old-space-size=4096`
- **Next.js Turbo:** Available for faster builds
- **Server Minification:** Enabled

**Best Practices:**
- ✅ Memory optimization for large builds
- ✅ Incremental compilation
- ✅ Bundle analysis available

## 📱 **Feature-Specific Dependencies**

### **Data Visualization**
- **Recharts:** `3.1.0` (Charts)
- **React Flow:** `11.11.4` (Node-based UIs)

### **Media & Content**
- **React Email:** `0.2.0` (Email templates)
- **React Speech Kit:** `3.0.1` (Voice features)
- **TinyColor2:** `1.6.0` (Color manipulation)

### **UI Enhancements**
- **Sonner:** `2.0.6` (Toast notifications)
- **Vaul:** `1.1.2` (Drawer component)
- **React Day Picker:** `9.8.0` (Date selection)

## ⚡ **React 19 Specific Features**

### **Actions & Server Actions**
- **Form Actions:** Native form handling with `action` prop
- **Server Actions:** Client-server communication with `'use server'`
- **Error Handling:** Automatic error boundaries and recovery

**Best Practices:**
- ✅ Use Actions for form submissions instead of onSubmit
- ✅ Implement Server Actions for database operations
- ✅ Handle loading states with useActionState
- ✅ Use useOptimistic for instant UI feedback

### **New Hooks**
- **useActionState:** Form state and submission handling
- **useFormStatus:** Access form status from child components
- **useOptimistic:** Optimistic UI updates
- **use():** Read promises and context conditionally

**Migration Examples:**
```typescript
// Old: React 18 form handling
const [loading, setLoading] = useState(false);
const handleSubmit = async (e) => {
  e.preventDefault();
  setLoading(true);
  // ... handle form
  setLoading(false);
};

// New: React 19 Actions
const [state, formAction, isPending] = useActionState(submitAction, null);
// Automatic loading state management
```

### **Document Metadata**
- **Native Support:** Render `<title>`, `<meta>`, `<link>` anywhere
- **Automatic Hoisting:** React moves metadata to document head
- **No Third-Party Libraries:** Replaces react-helmet

**Best Practices:**
- ✅ Co-locate metadata with components
- ✅ Use conditional metadata rendering
- ✅ Remove react-helmet dependencies

## 🎯 **Version Management Best Practices**

### **Dependency Update Strategy**
1. **Major Updates:** Test thoroughly, update documentation
2. **Minor Updates:** Review changelog, update regularly
3. **Patch Updates:** Apply promptly for security fixes

### **Version Pinning**
- **Exact versions** for critical dependencies (React, Next.js)
- **Caret ranges** for UI libraries and tools
- **Workspace references** for internal packages

### **Security Considerations**
- Regular dependency audits with `pnpm audit`
- Automated security updates for patch versions
- Monitor for known vulnerabilities

## 🚨 **Known Issues & Recommendations**

### **Current Recommendations**
1. **React 19 Migration:** Use `@next/codemod upgrade latest` for automated upgrades
2. **Supabase Auth Helpers:** Upgrade to `@supabase/ssr` for better Next.js 15 support
3. **React Icons:** Version `5.5.0` is latest, consider consistency with Lucide
4. **Turbopack:** Now stable, enable for faster builds with `--turbo` flag
5. **Error Boundaries:** Update for React 19's improved error handling

### **Performance Optimizations**
- Enable Turbopack for up to 57.6% faster compile times
- Use React 19 Actions for better form performance
- Implement useOptimistic for instant UI feedback
- Use streaming metadata for faster perceived loading
- Leverage React 19's automatic batching improvements

### **React 19 Migration Guidelines**
- Use React 18.3 as stepping stone before React 19
- Remove deprecated APIs: propTypes, defaultProps for functions
- Replace forwardRef with ref as prop
- Update error handling for new error reporting
- Migrate to new JSX transform if not already done

### **Accessibility**
- Radix UI provides excellent accessibility foundation
- React 19 Custom Elements support improves web components accessibility
- Ensure proper ARIA labels and keyboard navigation
- Test with screen readers

## 📚 **Documentation & Resources**

### **Key Documentation Links**
- [Next.js 15.2 Documentation](https://nextjs.org/docs)
- [React 19 Documentation](https://react.dev/blog/2024/12/05/react-19)
- [React 19 Upgrade Guide](https://react.dev/blog/2024/04/25/react-19-upgrade-guide)
- [Radix UI Components](https://www.radix-ui.com/)
- [Tailwind CSS](https://tailwindcss.com/docs)
- [Supabase Documentation](https://supabase.com/docs)
- [Turbopack Documentation](https://turbo.build/pack/docs)

### **Internal Guidelines**
- Follow the directory structure rule
- Use TypeScript for all new code
- Implement proper error boundaries
- Write tests for critical functionality

This stack provides a modern, scalable foundation for the BookAIMark application with excellent developer experience and performance characteristics.
